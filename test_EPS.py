#########################################################################

# Test merger trees generated by TreeGen.py

# Arthur Fangzhou Jiang 2020 Caltech

######################## set up the environment #########################

import config as cfg
import cosmo as co
import aux

import numpy as np
import sys
import os

import matplotlib as mpl # must import before pyplot
#mpl.use('Qt5Agg')
mpl.use('TkAgg')
mpl.rcParams['xtick.direction'] = 'in'
mpl.rcParams['ytick.direction'] = 'in'
mpl.rcParams['font.size'] = 16  
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec

############################ user control ###############################

#---data
M0 = 10.**12.3
z0 = 0. 
datadir = "./OUTPUT_tmp/"

#---for plot
outfig1 = "./FIGURE/test_EPS.pdf"

# mass bins for subhalo mass functions and PMFs
lgmM_bins = np.linspace(-5.0,0.,50)
dlgmM = lgmM_bins[1] - lgmM_bins[0]
lgmM_BinCenters = lgmM_bins[:-1]+0.5*dlgmM

# redshifts at which to plot the progenitor mass functions (PMFs)
z1 = 0.1
z2 = 0.5
z3 = 1.0
z4 = 2.0
z5 = 4.0

############################## compute ##################################

#---get the list of data files
files = []    
for filename in os.listdir(datadir):
    if filename.startswith('tree') and filename.endswith('.npz'): 
        files.append(os.path.join(datadir, filename))
files.sort()

#---
MAHs = [] 
dPdlgmpM0_z1 = []
dPdlgmpM0_z2 = []
dPdlgmpM0_z3 = []
dPdlgmpM0_z4 = []
dPdlgmpM0_z5 = []
dNdlgmaM0_all = []
dNdlgmaM0_1st = []
dNdlgmaM0_2nd = []
dNdlgmaM0_3rd = []
dNdlgmaM0_4th = []
dNdlgmaM0_5th = []
for file in files:
    
    #---
    f = np.load(file)
    z = f['z']
    mass = f['mass']
    order = f['order']
    ParentID = f['ParentID']
    mass[mass<0.]=1e-20
    
    #---mass assembly history
    MAHs.append(mass[0,:]/M0)
    
    #---progenitor mass functions
    idx = aux.FindClosestIndices(z,z1)
    mp = mass[:,idx]
    dPdlgmpM0_z1.append(np.histogram(np.log10(mp/M0),bins=lgmM_bins,
        weights=mp/M0,density=False)[0]/dlgmM)
        
    idx = aux.FindClosestIndices(z,z2)
    mp = mass[:,idx]
    dPdlgmpM0_z2.append(np.histogram(np.log10(mp/M0),bins=lgmM_bins,
        weights=mp/M0,density=False)[0]/dlgmM)
        
    idx = aux.FindClosestIndices(z,z3)
    mp = mass[:,idx]
    dPdlgmpM0_z3.append(np.histogram(np.log10(mp/M0),bins=lgmM_bins,
        weights=mp/M0,density=False)[0]/dlgmM)
    
    idx = aux.FindClosestIndices(z,z4)
    mp = mass[:,idx]
    dPdlgmpM0_z4.append(np.histogram(np.log10(mp/M0),bins=lgmM_bins,
        weights=mp/M0,density=False)[0]/dlgmM)
    
    idx = aux.FindClosestIndices(z,z5)
    mp = mass[:,idx]
    dPdlgmpM0_z5.append(np.histogram(np.log10(mp/M0),bins=lgmM_bins,
        weights=mp/M0,density=False)[0]/dlgmM)
    
    #---unevolved subhalo mass functions
    k = order.max(axis=1)
    mpeak = mass.max(axis=1)
    ma_all = mpeak[k>0]
    ma_1st = mpeak[k==1]
    ma_2nd = mpeak[k==2]
    ma_3rd = mpeak[k==3]
    ma_4th = mpeak[k==4]
    ma_5th = mpeak[k==5]
    dNdlgmaM0_all.append(np.histogram(np.log10(ma_all/M0),bins=lgmM_bins,
        density=False)[0]/dlgmM)
    dNdlgmaM0_1st.append(np.histogram(np.log10(ma_1st/M0),bins=lgmM_bins,
        density=False)[0]/dlgmM)
    dNdlgmaM0_2nd.append(np.histogram(np.log10(ma_2nd/M0),bins=lgmM_bins,
        density=False)[0]/dlgmM)
    dNdlgmaM0_3rd.append(np.histogram(np.log10(ma_3rd/M0),bins=lgmM_bins,
        density=False)[0]/dlgmM)
    dNdlgmaM0_4th.append(np.histogram(np.log10(ma_4th/M0),bins=lgmM_bins,
        density=False)[0]/dlgmM)
    dNdlgmaM0_5th.append(np.histogram(np.log10(ma_5th/M0),bins=lgmM_bins,
        density=False)[0]/dlgmM)
    
#---
tlkbk = co.tlkbk(z,cfg.h,cfg.Om,cfg.OL)
MAHs = np.vstack(MAHs)
MAH_ave = np.mean(MAHs,axis=0)
MAH_c50 = np.percentile(MAHs,50,axis=0)
MAH_c16 = np.percentile(MAHs,16,axis=0)
MAH_c84 = np.percentile(MAHs,84,axis=0)

#---
dPdlgmpM0_z5 = np.mean(np.vstack(dPdlgmpM0_z5),axis=0)
dPdlgmpM0_z4 = np.mean(np.vstack(dPdlgmpM0_z4),axis=0)
dPdlgmpM0_z3 = np.mean(np.vstack(dPdlgmpM0_z3),axis=0)
dPdlgmpM0_z2 = np.mean(np.vstack(dPdlgmpM0_z2),axis=0)
dPdlgmpM0_z1 = np.mean(np.vstack(dPdlgmpM0_z1),axis=0)
# 
x = 10.**lgmM_BinCenters * M0
dPdlgmpM0_z1_ref = co.dPdlnM1(x,z1,M0,z0,**cfg.cosmo) * cfg.ln10
dPdlgmpM0_z2_ref = co.dPdlnM1(x,z2,M0,z0,**cfg.cosmo) * cfg.ln10
dPdlgmpM0_z3_ref = co.dPdlnM1(x,z3,M0,z0,**cfg.cosmo) * cfg.ln10
dPdlgmpM0_z4_ref = co.dPdlnM1(x,z4,M0,z0,**cfg.cosmo) * cfg.ln10
dPdlgmpM0_z5_ref = co.dPdlnM1(x,z5,M0,z0,**cfg.cosmo) * cfg.ln10

#---
dNdlgmaM0_all = np.mean(np.vstack(dNdlgmaM0_all),axis=0)
dNdlgmaM0_1st = np.mean(np.vstack(dNdlgmaM0_1st),axis=0)
dNdlgmaM0_2nd = np.mean(np.vstack(dNdlgmaM0_2nd),axis=0)
dNdlgmaM0_3rd = np.mean(np.vstack(dNdlgmaM0_3rd),axis=0)
dNdlgmaM0_4th = np.mean(np.vstack(dNdlgmaM0_4th),axis=0)
dNdlgmaM0_5th = np.mean(np.vstack(dNdlgmaM0_5th),axis=0)
#
x = 10.**lgmM_BinCenters
dNdlgmaM0_all_ref = co.dNdlnmaM0_all(x,0.22,-0.91,6.,3.) * cfg.ln10
dNdlgmaM0_1st_ref = co.dNdlnmaM0_1st(x,0.13,1.33,-0.83,-0.02,5.67,1.19)\
    * cfg.ln10

################################ plots ##################################

print(">>> Plotting ...") 

# close all previous figure windows
plt.close('all')

#------------------------------------------------------------------------

fig = plt.figure(figsize=(15, 5), dpi=80, facecolor='w', edgecolor='k') 
fig.subplots_adjust(left=0.06, right=0.98,
    bottom=0.12, top=0.9,hspace=0.25, wspace=0.25)
gs = gridspec.GridSpec(1, 3) 
fig.suptitle(r'')

ax = fig.add_subplot(gs[0,0])
ax.set_xlim(0.,14.)
ax.set_ylim(1e-7,1.05)
ax.set_xlabel(r'$t_\mathrm{lookback} \mathrm{[Gyr]}$')
ax.set_ylabel(r'$M(z)/M_0$')
#ax.set_title(r'MAH')
start, end = ax.get_xlim()
major_ticks = np.arange(start, end, 2)
minor_ticks = np.arange(start, end, 0.5)
ax.set_xticks(major_ticks)
ax.set_xticks(minor_ticks,minor=True)
start, end = ax.get_ylim()
major_ticks = np.arange(start, end, 0.1)
minor_ticks = np.arange(start, end, 0.01)
ax.set_yticks(major_ticks)
ax.set_yticks(minor_ticks,minor=True)
# grid
ax.grid(which='minor', alpha=0.2)                                                
ax.grid(which='major', alpha=0.4)
# tick length
ax.tick_params('both',direction='in',top='on',right='on',length=10,
    width=1,which='major')
ax.tick_params('both',direction='in',top='on',right='on',length=5,
    width=1,which='minor')
# scale
#ax.set_yscale('log')
# top x-axis
ax2 = ax.twiny()
ax2.set_xlim(ax.get_xlim())
z_major = np.array([0.,0.1,0.2,0.5,1.,2.,5.,10.])
z_minor = np.arange(0.,20, 0.1)
tlookback_major=co.tlkbk(z_major,h=cfg.h,Om=cfg.Om,OL=cfg.OL)
tlookback_minor=co.tlkbk(z_minor,h=cfg.h,Om=cfg.Om,OL=cfg.OL)
major_ticks = tlookback_major
minor_ticks = tlookback_minor
ax2.set_xticks(major_ticks)
ax2.set_xticks(minor_ticks,minor=True)
ax2.set_xticklabels(z_major,fontsize=12)
ax2.set_xlabel(r'$z$')
# top x-axis tick length
ax2.tick_params('both',direction='in',top='on',right='on',length=10,
    width=1,which='major')
ax2.tick_params('both',direction='in',top='on',right='on',length=5,
    width=1,which='minor')
# plot
# individual
for MAH in MAHs:
    ax.plot(tlkbk,MAH,lw=1,color='grey',alpha=0.5)
ax.plot(tlkbk,MAH_ave,lw=2,color='k',label='mean')
ax.plot(tlkbk,MAH_c50,lw=2,color='k',ls='--',label='median')
ax.plot(tlkbk,MAH_c16,lw=1.5,color='k',ls=':',label='16th')
ax.plot(tlkbk,MAH_c84,lw=1.5,color='k',ls=':',label='84th')
# legend
ax.legend(loc='upper right',fontsize='small',numpoints=1)
#ax.text(0.95,1.05, '', color='k',fontsize=18, ha='center', va='center',
#        transform=ax.transAxes,rotation=0) # transform=ax.transData

ax = fig.add_subplot(gs[0,1])
ax.set_xlim(1.e-4,1.0)
ax.set_ylim(1.e-2,10.) 
ax.set_xlabel(r'$m_\mathrm{prog}/M_0$')
ax.set_ylabel(r'$m_\mathrm{prog}/M_0\times\mathrm{d}N/\mathrm{d}\log(m_\mathrm{prog}/M_0)$')
ax.set_title(r'progenitor mass function')
# tick and tick label positions
#start, end = ax.get_xlim()
#major_ticks = np.arange(start, end, 0.1)
#minor_ticks = np.arange(start, end, 0.05)
#ax.set_xticks(major_ticks)
#ax.set_xticks(minor_ticks,minor=True)
#start, end = ax.get_ylim()
# scale
ax.set_xscale('log')
ax.set_yscale('log')
# grid
#ax.grid(which='minor', alpha=0.2)                                                
#ax.grid(which='major', alpha=0.4)
# tick length
ax.tick_params('both',direction='in',top='on',right='on',length=10,
    width=1,which='major')
ax.tick_params('both',direction='in',top='on',right='on',length=5,
    width=1,which='minor')
# color 
colors = mpl.cm.cool(np.linspace(0,1,5))
# plot
x = 10.**lgmM_BinCenters
ax.plot(x, dPdlgmpM0_z1, lw=3,color=colors[0,:],label='z=%.1f'%(z1))
ax.plot(x, dPdlgmpM0_z2, lw=3,color=colors[1,:],label='z=%.1f'%(z2))
ax.plot(x, dPdlgmpM0_z3, lw=3,color=colors[2,:],label='z=%.1f'%(z3))
ax.plot(x, dPdlgmpM0_z4, lw=3,color=colors[3,:],label='z=%.1f'%(z4))
ax.plot(x, dPdlgmpM0_z5, lw=3,color=colors[4,:],label='z=%.1f'%(z5))
# reference line
ax.plot(x, dPdlgmpM0_z1_ref, lw=2,color='k',ls=':',label='Cole+08')
ax.plot(x, dPdlgmpM0_z2_ref, lw=2,color='k',ls=':')
ax.plot(x, dPdlgmpM0_z3_ref, lw=2,color='k',ls=':')
ax.plot(x, dPdlgmpM0_z4_ref, lw=2,color='k',ls=':')
ax.plot(x, dPdlgmpM0_z5_ref, lw=2,color='k',ls=':')
# legend
ax.legend(loc='upper left',fontsize='small',numpoints=1)

ax = fig.add_subplot(gs[0,2])
ax.set_xlim(1e-4,0.5)
ax.set_ylim(0.1,5000.) 
ax.set_xlabel(r'$m_\mathrm{acc}/M_0$')
ax.set_ylabel(r'$\mathrm{d}N/\mathrm{d}\log(m_\mathrm{acc}/M_0)$')
ax.set_title(r'unevolved subhalo mass function')
# tick and tick label positions
#start, end = ax.get_xlim()
#major_ticks = np.arange(start, end, 0.1)
#minor_ticks = np.arange(start, end, 0.05)
#ax.set_xticks(major_ticks)
#ax.set_xticks(minor_ticks,minor=True)
#start, end = ax.get_ylim()
# scale
ax.set_xscale('log')
ax.set_yscale('log')
# grid
#ax.grid(which='minor', alpha=0.2)                                                
#ax.grid(which='major', alpha=0.4)
# tick length
ax.tick_params('both',direction='in',top='on',right='on',length=10,
    width=1,which='major')
ax.tick_params('both',direction='in',top='on',right='on',length=5,
    width=1,which='minor')
# plot
x = 10.**lgmM_BinCenters
ax.plot(x, dNdlgmaM0_all, lw=3,color='k',label='all')
ax.plot(x, dNdlgmaM0_1st, lw=3,color='orange',label='1st order')
ax.plot(x, dNdlgmaM0_2nd, lw=3,color='blue',label='2nd order')
ax.plot(x, dNdlgmaM0_3rd, lw=3,color='magenta',label='3rd order')
ax.plot(x, dNdlgmaM0_4th, lw=3,color='green',label='4th order')
ax.plot(x, dNdlgmaM0_5th, lw=3,color='brown',label='5th order')
# reference
ax.plot(x, dNdlgmaM0_all_ref, lw=3,ls=':',color='r',label='JB14 all')
ax.plot(x, dNdlgmaM0_1st_ref, lw=2,ls=':',color='r',label='JB14 1st')
# legend
ax.legend(loc='best',fontsize='x-small',numpoints=1)

plt.savefig(outfig1,dpi=300)
fig.canvas.manager.window.attributes('-topmost', 1) 
plt.get_current_fig_manager().window.wm_geometry('+50+50')
fig.show()